// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id String @id @default(uuid())

  name  String @db.VarChar(255)
  price Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  belongsToId String
  belongsTo   User   @relation(fields: [belongsToId], references: [id])

  updates Update[]

  // In this case @@unique can be used to, to enforce uniqueness on a pair of fields,
  @@index([id, belongsToId])
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

model Update {
  id String @id @default(uuid())

  updateDate DateTime
  title      String
  body       String
  status     UPDATE_STATUS @default(IN_PROGRESS)
  version    String?
  asset      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  updatePoints UpdatePoints[]
}

model UpdatePoints {
  id String @id @default(uuid())

  name        String @db.VarChar(255)
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}
